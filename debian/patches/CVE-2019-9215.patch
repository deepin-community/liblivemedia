Description: fix invalid memory access in parseAuthorizationHeader
 sscanf(fields, "%[^=]=\"\"", parameter) returns 1 even if the entry is
 incorrectly formatted (e.g. fields = "p="), leading to excessive
 incrementation of fields pointer later:
   fields += strlen(parameter) + 2 /*="*/ + strlen(value) + 1 /*"*/;
 .
 This might allow attackers to perform invalid memory accesses.
 .
 This patch implements manual parsing of the keywords, allowing for better
 error resilience.
 .
 Patch source: diff v2019.02.03 -> v2019.02.27
Origin: upstream
--- a/liveMedia/RTSPServer.cpp	2019-03-12 18:36:07.618027268 +0100
+++ b/liveMedia/RTSPServer.cpp	2019-03-12 18:36:07.614027288 +0100
@@ -894,6 +894,8 @@
   }
 }
 
+#define SKIP_WHITESPACE while (*fields != '\0' && (*fields == ' ' || *fields == '\t')) ++fields
+
 static Boolean parseAuthorizationHeader(char const* buf,
 					char const*& username,
 					char const*& realm,
@@ -911,15 +913,28 @@
   
   // Then, run through each of the fields, looking for ones we handle:
   char const* fields = buf + 22;
-  while (*fields == ' ') ++fields;
   char* parameter = strDupSize(fields);
   char* value = strDupSize(fields);
-  while (1) {
-    value[0] = '\0';
-    if (sscanf(fields, "%[^=]=\"%[^\"]\"", parameter, value) != 2 &&
-	sscanf(fields, "%[^=]=\"\"", parameter) != 1) {
-      break;
-    }
+  char* p;
+  Boolean success;
+  do {
+    // Parse: <parameter>="<value>"
+    success = False;
+    parameter[0] = value[0] = '\0';
+    SKIP_WHITESPACE;
+    for (p = parameter; *fields != '\0' && *fields != ' ' && *fields != '\t' && *fields != '='; ) *p++ = *fields++;
+    SKIP_WHITESPACE;
+    if (*fields++ != '=') break; // parsing failed
+    *p = '\0'; // complete parsing <parameter>
+    SKIP_WHITESPACE;
+    if (*fields++ != '"') break; // parsing failed
+    for (p = value; *fields != '\0' && *fields != '"'; ) *p++ = *fields++;
+    if (*fields++ != '"') break; // parsing failed
+    *p = '\0'; // complete parsing <value>
+    SKIP_WHITESPACE;
+    success = True;
+
+    // Copy values for parameters that we understand:
     if (strcmp(parameter, "username") == 0) {
       username = strDup(value);
     } else if (strcmp(parameter, "realm") == 0) {
@@ -931,14 +946,12 @@
     } else if (strcmp(parameter, "response") == 0) {
       response = strDup(value);
     }
-    
-    fields += strlen(parameter) + 2 /*="*/ + strlen(value) + 1 /*"*/;
-    while (*fields == ',' || *fields == ' ') ++fields;
-        // skip over any separating ',' and ' ' chars
-    if (*fields == '\0' || *fields == '\r' || *fields == '\n') break;
-  }
+
+    // Check for a ',', indicating that more <parameter>="<value>" pairs follow:
+  } while (*fields++ == ',');
+
   delete[] parameter; delete[] value;
-  return True;
+  return success;
 }
 
 Boolean RTSPServer::RTSPClientConnection
